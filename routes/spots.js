// @author: Maryam Archie

var express = require("express");
var router = express.Router();
var _ = require("lodash");
var utils = require("../utils/utils");
var Spots = require("../models/Spots").Spots;
var Users = require("../models/Users").Users;

const BAD_REQUEST = 400;
const FORBIDDEN = 403;
const SERVER_ERROR = 500;

/**
 * Middleware that requires authentication on all access to the Spots/ Reviews/ Tags.
 * Users who have not logged in will receive a 403: Forbidden HTTP status code.
 * @param {Object} req - Must contain currentUser if signed in
 * @param {Object} res - error if not signed in, success otherwise
 * @param {function} next - callback function that calls the next piece of middleware
 */
var requireAuthentication = function (req, res, next) {
    if (!req.currentUser) {
        // User is not logged in
        utils.sendErrorResponse(res, FORBIDDEN, "To use this feature, please sign in or register.");
    } else {
        // User has access to feature
        next();
    }
};

/**
 * Helper function that handles errors
 * @param {Object} res - the response from the route
 * @param {Object} err - err.http_status: known errors generated by model
 *                       otherwise, unknown errors
 */
var routerErrorHandler = function (res, err) {
    if (err.http_status) {
        utils.sendErrorResponse(res, err.http_status, err.msg);
    } else {
        // Unknown Error
        utils.sendErrorResponse(res, SERVER_ERROR, "Something went wrong... Please try again.");
    }
};

// Register the middleware handlers above.
router.post("*", requireAuthentication);
router.delete("*", requireAuthentication);

/**
 * Gets all the Spots
 * GET /spots/
 * @param {Object} req - the request does not need require anything
 * @param {Object} res - success.spots: a list of Spots, empty if none
 *                     - error: on error, an error message
 */
router.get("/", function (req, res) {
    Spots.getSpots(function (err, spots) {
        if (err) {
            utils.sendSuccessResponse(res, { spots: [] });
        } else {
            utils.sendSuccessResponse(res, { spots: spots });
        }
    });
});

/**
 * Gets a particular Spot given its id
 * GET /spots/:spotId
 * @param {Object} req - the request must contain spotId as a parameter
 * @param {Object} res - success.spot: the Spot of interest
 *                     - error: on error, an error message
 */
router.get("/:spotId", function (req, res) {
    var spotId = req.params.spotId;
    Spots.getSpotById(spotId, function (err, spot) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res, { spot: spot });
        }
    });
});

/**
 * Gets the details of a particular Spot
 * GET /spots/:spotId/details
 * @param {Object} req - the request must contain the label as a parameter
 * @param {Object} res - success.spot_id: the id of the spot
 */
router.get("/:spotId/details", function (req, res) {
    var spotId = req.params.spotId;
    res.render("spotDetails", { spot_id: spotId });
});

/**
 * Gets all the spots within the specified geographical bounds
 * GET /spots/byLocation/:location
 * @param {Object} req - the request body must contain the location of the form
 *                          "{ minLatitude: min latitude of the map,
 *                             maxLatitude: the max latitude of the map,
 *                             minLongitude: the min longitude of the map,
 *							   maxLongitude: the min longitude of the map }"
 * @param {Object} res - success.spots: a list of Spots, empty if none
 */
router.get("/byLocation/:location", function (req, res) {
    var location = JSON.parse(req.params.location);
    var minLatitude = location.minLatitude;
    var maxLatitude = location.maxLatitude;
    var minLongitude = location.minLongitude;
    var maxLongitude = location.maxLongitude;
    Spots.getSpotsByLocation(minLatitude, maxLatitude, minLongitude, maxLongitude, function (err, spots) {
        if (err) {
            utils.sendSuccessResponse(res, { spots: [] });
        } else {
            utils.sendSuccessResponse(res, { spots: spots });
        }
    });
});

/**
 * Create a Spot
 * POST /spots
 * @param {Object} req - the request body must contain title, location ({latitude, longitude}),
 *                       label, description, rating
 * @param {Object} res - success.spot: the spot of interest
 *                     - error: on error, an error message
 */
router.post("/", function (req, res) {
    var title = req.body.title;
    var creatorId = req.currentUser._id;
    var location = req.body.location;
    var floor = req.body.floor ? req.body.floor : null;
    var label = req.body.label.toLowerCase();
    var description = req.body.description;
    var rating = parseInt(req.body.rating);

    if (!description) {
        utils.sendErrorResponse(res, BAD_REQUEST, "Please enter a description for the review.");
    } else {
        Spots.addSpot(title, creatorId, location, floor, label, description, rating, function (err, spot) {
            if (err) {
                if (err.msg.msg) {
                    // User cannot be found or checkRep was violated
                    utils.sendErrorResponse(res, err.msg.http_status, err.msg.msg);
                } else if (err.http_status) {
                    // Duplicate title
                    utils.sendErrorResponse(res, err.http_status, err.msg);
                } else {
                    // Unknown error
                    utils.sendErrorResponse(res, SERVER_ERROR, "Something went wrong... Please try again.");
                }
            } else {
                utils.sendSuccessResponse(res, { spot: spot });
            }
        });
    }
});

/**
 * Add a Review to a Spot
 * POST /spots/:spotId/addReview
 * @param {Object} req - the request must contain the spotId as a parameter
 *                     - the request body must contain description and rating
 * @param {Object} res - success: true if the Review is successfully added to the Spot
 *                     - error: on error, an error message
 */
router.post("/:spotId/addReview", function (req, res) {
    var spotId = req.params.spotId;
    var creatorId = req.currentUser._id;
    var description = req.body.description;
    var rating = parseInt(req.body.rating);

    Spots.addReviewToSpot(spotId, creatorId, description, rating, function (err) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res);
        }
    });
});

/**
 * User favorites a Spot
 * POST /spots/:spotId/favorite
 * @param {Object} req - the request must contain the spotId as a parameter
 * @param {Object} res - success: true if the Spot has been successfully favorited by the User, false otherwise
 *                     - error: on error, an error message
 */
router.post("/:spotId/favorite", function (req, res) {
    var spotId = req.params.spotId;
    var userId = req.currentUser._id;
    Users.favoriteSpot(userId, spotId, function (err) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res);
        }
    });
});

/**
 * Report a Spot
 * POST /spots/:spotId/report
 * @param {Object} req - the request must contain the spotId as a parameter
 * @param {Object} res - success: true if the Spot has been successfully reported by the User, false otherwise
 *                     - error: on error, an error message
 */
router.post("/:spotId/report", function (req, res) {
    var spotId = req.params.spotId;
    var userId = req.currentUser._id;
    Spots.reportSpot(spotId, userId, function (err) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res);
        }
    });
});

/**
 * Delete a Spot
 * DELETE /spots/:spotId
 * @param {Object} req - the request must contain the spotId as a parameter
 * @param {Object} res - success: true if the Spot has been successfully deleted by the User, false otherwise
 *                     - error: on error, an error message
 * 
 */
router.delete("/:spotId", function (req, res) {
    var spotId = req.params.spotId;
    var userId = req.currentUser._id;
    Spots.deleteSpot(spotId, userId, function (err) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res);
        }
    });
});

module.exports = router;
