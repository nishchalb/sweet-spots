//@author: Maryam Archie

var express = require("express");
var router = express.Router();
var _ = require("lodash");
var utils = require("../utils/utils");
var Reviews = require("../models/Reviews").Reviews;
var Spots = require("../models/Spots").Spots;

const FORBIDDEN = 403;
const SERVER_ERROR = 500;

/**
 * Middleware that requires authentication on all access to the Spots/ Reviews/ Tags.
 * Users who have not logged in will receive a 403: Forbidden HTTP status code.
 * @param {Object} req - Must contain currentUser if signed in
 * @param {Object} res - error if not signed in, success otherwise
 * @param {function} next - callback function that calls the next piece of middleware
 */
var requireAuthentication = function(req, res, next) {
    if (!req.currentUser) {
        // User is not logged in
        utils.sendErrorResponse(res, FORBIDDEN, "To use this feature, please sign in or register.");
    } else {
        // User has access to feature
        next();
    }
};

/**
 * Helper function that handles errors
 * @param {Object} res - the response from the route
 * @param {Object} err - err.http_status: known errors generated by model
 *                       otherwise, unknown errors
 */
var routerErrorHandler = function(res, err) {
    if (err.http_status) {
        utils.sendErrorResponse(res, err.http_status, err.msg);
    } else {
        // Unknown Error
        utils.sendErrorResponse(res, SERVER_ERROR, "Something went wrong... Please try again.");
    }
};

// Register the middleware handlers above.
router.post("*", requireAuthentication);

/**
 * Gets the Spot associated with a Reviews
 * GET /reviews/:reviewId/spot
 * @param {Object} req - the request must contain the reviewId as a parameter
 * @param {Object} res - success.spot: the Spot of interest
 *                     - error: on error, an error message
 */
router.get("/:reviewId/spot", function(req, res) {
    var reviewId = req.params.reviewId;
    Spots.getSpotByReview(reviewId, function(err, spot) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res, { spot: spot });
        }
    });
});

/**
 * Upvotes/ downvotes a Review
 * POST /reviews/:reviewId
 * @param {Object} req - the request parameters should contain the reviewId
 *                     - the request body should contain upvote (true if upvote, false otherwise)
 * @param {Object} res - sucess: true if the Review was successfully upvoted/ downvoted, false otherwise
 *                     - error: on error, an error message
 */
router.post("/:reviewId", function(req, res) {
    var reviewId = req.params.reviewId;
    var upvote = req.body.upvote;
    Reviews.updateScore(reviewId, req.currentUser._id, upvote, function(err) {
        if (err) {
            routerErrorHandler(res, err);
        } else {
            utils.sendSuccessResponse(res);
        }
    });
});

module.exports = router;
